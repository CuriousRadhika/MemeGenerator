name: CI/CD for Meme Generator

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Only fetch the files needed for linting
          sparse-checkout: |
            src/
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # Further optimize by combining ESLint installation and linting
      - name: Install and run ESLint
        run: |
          npm install eslint @eslint/js --no-package-lock
          npx eslint src --ext .js,.jsx --max-warnings=0 --cache
        env:
          # Set smaller memory limit for faster processing
          NODE_OPTIONS: "--max-old-space-size=2048"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    # Run in parallel with lint job (no dependency)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      # Placeholder for tests
      - name: Run tests (placeholder)
        run: echo "No tests configured yet. Add tests later!"

  build:
    name: Build Project
    # Depends on both lint and test
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Clean installation
        run: |
          rm -rf node_modules package-lock.json || true
          npm install

      - name: Build project
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/
          retention-days: 1

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload artifact to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: './build'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2